#include <SFML/Graphics.hpp>
#include <iostream>
#include <cstdlib>
#include <ctime>



#include <thread>
#include <chrono>

using namespace std;
using namespace sf;

#define random(a,b) a+rand()%(b+1-a)
int TURN = 0;

struct Card
{
    sf::Texture texture;
    int suit; // 0 - Spades, 1 - Hearts, 2 - Diamonds, 3 - Clubs
    int value; // 6 - Ace
    
};

struct Desk
{
    Texture backTexture;
    int suitInt;//масть козыря
    Card* cards[36]{ nullptr };
    int counter = 0;
    

    void mix() {
        for (int j = 0; j < 36; j++) {
            int x = random(j, 35);
            if (x != j) {
                swap(cards[j], cards[x]);
            }
        }
    }

    Card* delCard() {
        if (counter > 0) {
            Card* card = cards[counter - 1];
            cards[--counter] = nullptr;
            return card;
        }
        else return nullptr;
    }

    void addCards(Card* card) {
        cards[counter++] = card;
    }

    Card* cards[36]{ nullptr };

    void addCard(Card card) {
        if (counter == 0) {
            cards = new Card[1];
            cards[0] = card;
            counter++;
        }
        else {
            Card* buf = new Card[counter + 1];
            for (int i = 0; i < counter; i++) {
                buf[i] = cards[i];
            }
            buf[counter] = card;
            delete[] cards;
            cards = buf;
            counter++;
        }

    }
};

struct Player {
    Card* cards = nullptr;
    int counter = 0;
    Texture backTexture;
    void countCheck(Desk* desk) {
        if (counter > 6) {
            cout << "No more";
        }
        else addCard(desk);
    }

    //добавление из колоды
    void addCard(Desk& desk) {
        if (desk.counter > 0) {
            if (counter == 0) {
                cards = new Card[1];
                cards[0] = *desk.delCard();
                counter++;
            }
            else {
                Card* buf = new Card[counter + 1];
                for (int i = 0; i < counter; i++) {
                    buf[i] = cards[i];
                }
                buf[counter] = *desk.delCard();
                delete[] cards;
                cards = buf;
                counter++;
            }
        }
        else cout << "Desk is empty" << endl;
    }
    void removeCard(int index) {
        if (index >= 0 && index < counter) {
            if (counter == 1) {
                delete[] cards;
                cards = nullptr;
                counter = 0;
            }
            else {
                Card* tempCards = new Card[counter - 1];
                for (int i = 0; i < index; i++) {
                    tempCards[i] = cards[i];
                }
                for (int i = index + 1; i < counter; i++) {
                    tempCards[i - 1] = cards[i];
                }
                delete[] cards;
                cards = tempCards;
                counter--;
            }
        }
    }
    //добавление по отправке карты
    void addCard(Card card) {
        if (counter == 0) {
            cards = new Card[1];
            cards[0] = card;
            counter++;
        }
        else {
            Card* buf = new Card[counter + 1];
            for (int i = 0; i < counter; i++) {
                buf[i] = cards[i];
            }
            buf[counter] = card;
            delete[] cards;
            cards = buf;
            counter++;
        }
    }


    

};
void loadCards(Desk& desk, Player& enemy)
{
    for (int i = 0; i < 36; i++)
    {
        Card* card = new Card();
        // Calculate suit and value based on position in the image
        card->suit = i / 9;
        card->value = (i % 9) + 6;

        // Set the texture rectangle for the card
        sf::IntRect textureRect(70 * (i % 9), 98 * (i / 9), 70, 98);
        card->texture.setSmooth(true);
        card->texture.setRepeated(false);
        card->texture.loadFromFile("card3.png", textureRect);
        desk.addCards(card);
    }
    


}
void drawPlayerCards(sf::RenderWindow& window, Player& player,int position)
{
    int cardWidth = 70;
    int padding = player.counter*1.7;//отступ карт
    int startX = (window.getSize().x - (player.counter * (cardWidth - padding) + padding)) / 2;
    int y = window.getSize().y - 100;


    for (int i = 0; i < player.counter; i++)
    {
        sf::Sprite sprite(player.cards[i].texture);
        sprite.setPosition(startX + i * (cardWidth - padding), y);
        sprite.rotate(6.0f);
        if (i == position) {
            sprite.move(0, -40);
            // Обработка событий
     
        }
        
        



        window.draw(sprite);
    }
}
bool playerTurn( Player& player, int position,Desk& field,Desk& desk) {
    if(scanToFight(field,player.cards[position],desk))
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::E)) {
            std::this_thread::sleep_for(std::chrono::milliseconds(200));
            player.removeCard(position);
            return 1;
        }

}
void drawEnemyCards(RenderWindow& window, Player& player)
{
    int cardWidth = 70;
    int padding = player.counter * 1.7;//отступ карт
    int startX = (window.getSize().x - (player.counter * (cardWidth - padding) + padding)) / 2;
    int y = window.getSize().y - 600;


    for (int i = 0; i < player.counter; i++)
    {
        sf::Sprite sprite(player.backTexture);
        sprite.setPosition(startX + i * (cardWidth - padding), y);
        sprite.rotate(6.0f);

        window.draw(sprite);
    }
}
void drawDesk(RenderWindow& window,Desk& desk) {

    int cardWidth = 70;
    int padding = 40;//отступ карт

    int startX = (window.getSize().x)-700;
    int y = window.getSize().y /2-50;

    if(desk.counter>1){

        sf::Sprite sprite(desk.backTexture);
        Sprite trump(desk.cards[0]->texture);
        trump.setPosition(startX + 50, y);
        trump.rotate(90.0f);
        sprite.setPosition(startX, y);
        sprite.rotate(90.0f);

        cout <<" counterDesk"<<desk.counter<< endl;
        window.draw(trump);
        window.draw(sprite);
        
    }
    else if(desk.counter==1) {
        cout << "One card left" << endl;
        Sprite trump(desk.cards[0]->texture);
        trump.setPosition(startX, y);
        trump.rotate(90.0f);
        window.draw(trump);
    }



}
void drawDiscarding(RenderWindow& window, Desk& discarding) {

    int startX = (window.getSize().x) - 100;
    int y = window.getSize().y / 2 - 50;

    if (discarding.counter != 0) {
        sf::Sprite sprite(discarding.backTexture);
        sprite.setPosition(startX, y);
        window.draw(sprite);
    }
    
}
void drawField(RenderWindow& window, Desk& field) {
    int cardWidth = 40;
    int padding = field.counter * 1.1;//отступ карт


    int startX = (window.getSize().x - (field.counter * (cardWidth - padding) )) / 2;
    int y = window.getSize().y - 350;


    for (int i = 0; i < field.counter; i++)
    {
        sf::Sprite sprite(field.cards[i]->texture);
        sprite.setPosition(startX + i * (cardWidth - padding), y);
        sprite.rotate(6.0f);

        window.draw(sprite);
    }


}
//кто ходит первым(по младшей масти)
bool scanToStart(Desk& desk, Player& player, Player& enemy) {
    
    int playerSuit = 13;
    int enemySuit = 13;
    for (int i = 0; i < 7; i++) {
        if (player.cards[i].suit == desk.cards[0]->suit && player.cards[i].value <playerSuit) {
            playerSuit == player.cards[i].value;
        }
        if (enemy.cards[i].suit == desk.cards[0]->suit && enemy.cards[i].value < enemySuit) {
            enemySuit == enemy.cards[i].value;
        }
    }
    return ((playerSuit < enemySuit) ? 1 : 0);



}

//проверка, может ли карта побить последнюю карту
bool scanToFight(Desk& field,Card& card,Desk& desk) {
    //если  карта не козырь и масти совпадают и значение бъющей больше
    if (card.suit!=desk.suitInt  &&  field.cards[field.counter]->suit==card.suit&& field.cards[field.counter]->value< card.value) {
        return 1;
    }
    //если эта карта козырь, а карта которую бьют не козырь
    else if (desk.suitInt == card.suit && field.cards[field.counter]->suit != desk.suitInt) {
        return 1;
    }
    //если карта козырь, и которую бъют тоже и значение бъющей больше
    else if (desk.suitInt == card.suit && field.cards[field.counter]->suit == desk.suitInt && field.cards[field.counter]->value < card.value) {
        return 1;
    }
    return 0;

}


bool iiEnemy(Desk& field, Player& enemy,bool turn,Desk& desk) {
    if (field.counter % 2 != 0&& field.counter>0) {
        for (int i = 0; i < enemy.counter; i++) {
            if (scanToFight(field, enemy.cards[i], desk)) {
                field.addCards(&enemy.cards[i]);
                enemy.removeCard(i);
                return 1;
            }
        }
    }
    else {
        int min = 0;
        for (int i = 0; i < enemy.counter; i++) {
            if (enemy.cards[i].value < min && enemy.cards[i].suit != desk.suitInt) {
                field.addCards(&enemy.cards[i]);
                enemy.removeCard(i);
                return 1;
            }
        }
    }


}

int main()
{
    Desk desk;
    Player player;
    Player enemy;
    Desk discarding;
    //сброс 
    Desk field;
    //поле боя 
    loadCards(desk, enemy);
    srand(time(NULL));



    sf::RenderWindow window(sf::VideoMode(800, 600), "SFML window");
    window.setFramerateLimit(30);
    // Создаем прямоугольник для залития текстурой
    sf::RectangleShape background(sf::Vector2f(window.getSize().x, window.getSize().y));
    sf::Texture texturebackground;
    if (!texturebackground.loadFromFile("background.png"))
    {
        // Ошибка загрузки текстуры
    }
    background.setTexture(&texturebackground);

   
    desk.mix();
    swap(desk.cards[0], desk.cards[35]);//устанавливает козырь как последнюю карту
    desk.suitInt = desk.cards[0]->suit;//фиксируем масть козыря
    

    //вырезает оборот карты и отправляет его к противнику и в колоду
    IntRect backTexture(630, 0, 70, 98);
    enemy.backTexture.loadFromFile("card3.png", backTexture);
    desk.backTexture.loadFromFile("card3.png", backTexture);
    discarding.backTexture.loadFromFile("card3.png", backTexture);


    TURN = scanToFight(desk, &player, &enemy);
    




    int positionCardChouse = 0;//отслеживание какую карты выбрал игрок
    //раздаем по 6 карт
    for (int i = 0; i < 6; i++) {
        player.addCard(&desk);
        enemy.addCard(&desk);
    }
    while (window.isOpen())
    {
        // Обработка событий
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Space)
            {
                std::cout << "Space key pressed" << std::endl;
                /*player.addCard(&desk);*/

                //добавляет карту в сброс
                //discarding.addCards(desk.delCard());
                field.addCards((desk.delCard()));
                
            }

            if (TURN) {
                if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Left)
                {
                    if (positionCardChouse == 0) positionCardChouse = player.counter - 1;
                    else positionCardChouse--;

                }
                if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Right)
                {
                    if (positionCardChouse == player.counter) positionCardChouse = 0;
                    else positionCardChouse++;

                }
                if (playerTurn(player,positionCardChouse,field,desk) {
                    TURN = 0;
                }
            }
            else {
                iiEnemy(field, enemy, 1, desk);
                TURN= 1;
            }

        }

        // Очищаем экран и рисуем фон
        window.clear();
        window.draw(background);

        // Рисуем карты 
        drawPlayerCards(window, player, positionCardChouse);
        drawEnemyCards(window, enemy);
        drawDesk(window, desk);
        drawDiscarding(window, discarding);
        drawField(window, field);
        window.display();
        
    }
    //// Получаем позицию курсора на экране
    //sf::Vector2i mousePos = sf::Mouse::getPosition(window);

    return 0;
}